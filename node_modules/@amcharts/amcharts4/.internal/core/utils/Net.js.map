{"version":3,"file":"Net.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Net.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,KAAK,KAAK,MAAM,QAAQ,CAAC;AAqDhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,eAAwB,GAAW,EAAE,MAAU,EAAE,OAA4B;;;YAClF,sBAAO,IAAI,OAAO,CAAoB,UAAC,OAAO,EAAE,KAAK;oBAEpD,qCAAqC;oBACrC,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;oBAC/B,GAAG,CAAC,MAAM,GAAG;wBACZ,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;4BACvB,IAAI,QAAQ,GAAW,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,QAAQ,CAAC;4BAExD,OAAO,CAAC;gCACP,GAAG,EAAE,GAAG;gCACR,KAAK,EAAE,KAAK;gCACZ,QAAQ,EAAE,QAAQ;gCAClB,IAAI,EAAE,GAAG,CAAC,iBAAiB,CAAC,cAAc,CAAC;gCAC3C,MAAM,EAAE,MAAM;6BACd,CAAC,CAAC;yBACH;6BACI;4BACJ,KAAK,CAAC;gCACL,GAAG,EAAE,GAAG;gCACR,KAAK,EAAE,IAAI;gCACX,IAAI,EAAE,GAAG,CAAC,iBAAiB,CAAC,cAAc,CAAC;gCAC3C,MAAM,EAAE,MAAM;6BACd,CAAC,CAAC;yBACH;oBACF,CAAC,CAAC;oBACF,GAAG,CAAC,OAAO,GAAG;wBACb,KAAK,CAAC;4BACL,GAAG,EAAE,GAAG;4BACR,KAAK,EAAE,IAAI;4BACX,IAAI,EAAE,GAAG,CAAC,iBAAiB,CAAC,cAAc,CAAC;4BAC3C,MAAM,EAAE,MAAM;yBACd,CAAC,CAAC;oBACJ,CAAC,CAAC;oBAEF,eAAe;oBACf,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBAErB,kBAAkB;oBAClB,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;wBACtE,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACtD,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;4BACvC,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;yBAC/C;qBACD;oBAED,eAAe;oBACf,GAAG,CAAC,IAAI,EAAE,CAAC;gBAEZ,CAAC,CAAC,EAAC;;;CAEH","sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines an interface for objects that hold a net request result.\r\n */\r\nexport interface INetLoadResult<A> {\r\n\r\n\t/**\r\n\t * A reference to original [[XMLHttpRequest]].\r\n\t * \r\n\t * @type {XMLHttpRequest}\r\n\t */\r\n\txhr: XMLHttpRequest;\r\n\r\n\t/**\r\n\t * Request response body.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\tresponse: string;\r\n\r\n\t/**\r\n\t * Response `Content-Type`.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\ttype: string | null;\r\n\r\n\t/**\r\n\t * Was there an error?\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\terror: boolean;\r\n\r\n\t/**\r\n\t * A target object that made the net load request.\r\n\t * \r\n\t * @type {A}\r\n\t */\r\n\ttarget?: A;\r\n\r\n}\r\n\r\nexport interface INetRequestOptions {\r\n\r\n\t/**\r\n\t * Custom request headers to be added to HTTP(S) request.\r\n\t */\r\n\trequestHeaders?: { key: string, value: string}[];\r\n\r\n}\r\n\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * \r\n * @async\r\n * @param  {string}                      url      URL for the file to load\r\n * @param  {A}                           target   A target element that is requesting the net load\r\n * @param  {INetRequestOptions}          options  Request options\r\n * @return {Promise<INetLoadResult<A>>}           Result (Promise)\r\n */\r\nexport async function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\r\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\r\n\r\n\t\t// Create request and set up handlers\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\t\txhr.onload = () => {\r\n\t\t\tif (xhr.status === 200) {\r\n\t\t\t\tlet response: string = xhr.responseText || xhr.response;\r\n\r\n\t\t\t\tsuccess({\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: false,\r\n\t\t\t\t\tresponse: response,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\terror({\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: true,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.onerror = () => {\r\n\t\t\terror({\r\n\t\t\t\txhr: xhr,\r\n\t\t\t\terror: true,\r\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\ttarget: target\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Open request\r\n\t\txhr.open(\"GET\", url);\r\n\r\n\t\t// Process options\r\n\t\tif ($type.hasValue(options) && $type.hasValue(options.requestHeaders)) {\r\n\t\t\tfor(let i = 0; i < options.requestHeaders.length; i++) {\r\n\t\t\t\tlet header = options.requestHeaders[i];\r\n\t\t\t\txhr.setRequestHeader(header.key, header.value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send request\r\n\t\txhr.send();\r\n\r\n\t});\r\n\r\n}"]}