{"version":3,"file":"Legend.js","sourceRoot":"","sources":["../../../../src/.internal/charts/Legend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { EventDispatcher, AMEvent } from \"../core/utils/EventDispatcher\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { Sprite } from \"../core/Sprite\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem<T, E extends ILegendItemEvents> extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t *\r\n\t * @type {Label}\r\n\t */\r\n\tpublic valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item. It could be any object that implementes\r\n\t * [[ILegendItem]] interface, i.e. Series, Pie slice, etc.\r\n\t *\r\n\t * @type {ILegendItem}\r\n\t */\r\n\tpublic dataContext: ILegendItem<T, E>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Legend}\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/** \r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t * @type {string}\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position.\r\n *\r\n * @type {string}\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvisible?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @type {LegendPosition}\r\n\t */\r\n\tposition?: LegendPosition\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * Represents a an interface for leged item.\r\n */\r\nexport interface ILegendItem<T, E extends ILegendItemEvents> {\r\n\r\n\t/**\r\n\t * Legend item needs to have an EventDispatcher so that legend can monitor\r\n\t * changes in its properties, i.e. `visible`\r\n\t *\r\n\t * @type {EventDispatcher}\r\n\t */\r\n\tevents: EventDispatcher<AMEvent<T, E>>;\r\n\r\n\t/**\r\n\t * Method that creates a legend marker for the item.\r\n\t *\r\n\t * @type {any}\r\n\t * @todo Better type\r\n\t */\r\n\tcreateLegendMarker: (container: Container) => any;\r\n\r\n\t/**\r\n\t * Settings that should be applied to legend item.\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t */\r\n\tlegendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * A [[DataItem]] that will be used to extract value for the legend.\r\n\t *\r\n\t * @type {DataItem}\r\n\t */\r\n\tlegendDataItem: DataItem;\r\n\r\n\t/**\r\n\t * Is the item currently visible or turned off?\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tvisible: boolean;\r\n\r\n\t/**\r\n\t * Is the item currently being hidden. (hide animation is being played)\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tisHiding?: boolean;\r\n\r\n\t/**\r\n\t * Legend item needs to return a unique id of its element while and ensure\r\n\t * the `id` attribute is set on the actual node so that it can be referenced\r\n\t * to.\r\n\t *\r\n\t * @type {Function}\r\n\t */\r\n\tuidAttr: () => string;\r\n\r\n\t/**\r\n\t * Legend item's event to show it when it's toggled on in legend.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tshow: () => void;\r\n\r\n\t/**\r\n\t * Legend item's event to hide it when it's toggled off in legend\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\thide: () => void;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n * @todo Verify/implement dynamic updating of legend items once the properties of related Series change\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILegendDataFields}\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILegendProperties}\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILegendAdapters}\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILegendEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tpublic _dataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * @type {LegendPosition}\r\n\t * @deprecated Moved to prroperties\r\n\t */\r\n\t//protected _position: LegendPosition;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t *\r\n\t * @type {ListTemplate<Container>}\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t *\r\n\t * @type {ListTemplate<Label>}\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t *\r\n\t * @type {ListTemplate<Container>}\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t *\r\n\t * @type {ListTemplate<Label>}\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t *\r\n\t * @type {this[\"_dataItem\"]}\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.useDefaultMarker = false;\r\n\t\tthis.contentAlign = \"center\";\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.padding(10, 0, 10, 0);\r\n\t\titemContainer.margin(0, 5, 0, 0);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"checkbox\";\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Add click/tap event to toggle item\r\n\t\t// not good to listen to \"toggled\" as we will get to stackoverflow\r\n\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\tthis.toggleDataItem(<this[\"_dataItem\"]>ev.target.dataItem);\r\n\t\t}, this);\r\n\r\n\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t// for keyboard toggling\r\n\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\tthis.focusedItem = <this[\"_dataItem\"]>ev.target.dataItem;\r\n\t\t});\r\n\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\tthis.focusedItem = undefined;\r\n\t\t});\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tthis.toggleDataItem(this.focusedItem);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.propertyFields.fill = \"fill\";\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\t\t\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 40; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.renderingFrequency = 2;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\";\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LegendDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem<DataItem, IDataItemEvents>();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {LegendDataItem} dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t// Get data item (legend item's) container and assign it to legend container\r\n\t\tlet container: Container = dataItem.itemContainer;\r\n\r\n\t\tif (!container) {\r\n\t\t\t// Create new container for the data item\r\n\t\t\tcontainer = this.itemContainers.create();\r\n\t\t\tdataItem.addSprite(container);\r\n\t\t\tcontainer.readerTitle = this.language.translate(\"Click, tap or press ENTER to toggle\");\r\n\t\t\tif (dataItem.dataContext.uidAttr) {\r\n\t\t\t\tcontainer.readerControls = dataItem.dataContext.uidAttr();\r\n\t\t\t\tcontainer.readerLabelledBy = dataItem.dataContext.uidAttr();\r\n\t\t\t}\r\n\t\t\tdataItem.itemContainer = container;\r\n\r\n\t\t\t// Add an event to check for item's properties\r\n\t\t\t// We cannot do this on a template since template does not have\r\n\t\t\t// dataContext, yet\r\n\t\t\tlet sprite = <any>dataItem.dataContext;\r\n\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\tcontainer.addDisposer(\r\n\t\t\t\t\tsprite.events.on(\"visibilitychanged\", (ev) => {\r\n\t\t\t\t\t\tcontainer.readerChecked = ev.visible;\r\n\t\t\t\t\t\tcontainer.isActive = !ev.visible;\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.parent = this;\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Create a marker for legend item\r\n\t\tlet marker: Container = dataItem.marker;\r\n\t\tif (!marker) {\r\n\t\t\tmarker = this.markers.create();\r\n\t\t\tmarker.parent = container;\r\n\t\t\tdataItem.marker = marker;\r\n\t\t}\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tif (dataItem.dataContext.createLegendMarker && !this.useDefaultMarker) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataItem.dataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Create label\r\n\t\tlet label: Label = dataItem.label;\r\n\t\tif (!label) {\r\n\t\t\tlabel = this.labels.create();\r\n\t\t\tlabel.parent = container;\r\n\t\t\tdataItem.label = label;\r\n\t\t}\r\n\r\n\t\t// Create value label\r\n\t\tlet valueLabel: Label = dataItem.valueLabel;\r\n\t\tif (!valueLabel) {\r\n\t\t\tvalueLabel = this.valueLabels.create();\r\n\t\t\tvalueLabel.parent = container;\r\n\t\t\tdataItem.valueLabel = valueLabel;\r\n\t\t}\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\t\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\t\tcontainer.isActive = !visible;\r\n\r\n\t\t// this is needed as in case custom items were created in series the color might not be active\r\n\t\tmarker.children.each((child) => {\r\n\t\t\tchild.isActive = !visible;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param {LegendPosition}  value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 20, 10, 20);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.itemContainers.template.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.width = percent(100);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.itemContainers.template.maxWidth = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.width = 40;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendPosition} Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `true` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean} value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]} item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\t\tif (!dataContext.visible || dataContext.isHiding) {\r\n\t\t\titem.itemContainer.isActive = false;\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {Preloader} Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n"]}